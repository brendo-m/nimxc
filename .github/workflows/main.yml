name: tests

on:
  pull_request:
  push:

jobs:
  compile:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        version:
          - binary:1.6
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
    steps:
    - uses: actions/checkout@v1
    - uses: iffy/install-nim@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        version: ${{ matrix.version }}
    - name: Run tests
      shell: bash
      run: |
        pwd
        nimble install -y
        nimble test
    - name: Pass binaries to next step
      uses: actions/upload-artifact@v2
      with:
        name: binaries-${{ matrix.os }}
        path: _tests/tests/
  run:
    needs: [compile]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        version:
          - binary:1.6
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
    steps:
    - uses: actions/checkout@v1
    - uses: iffy/install-nim@v4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        version: ${{ matrix.version }}
    - name: Install nimxc
      run: |
        nimble install -y
    - name: Get binaries compiled in prior step
      uses: actions/download-artifact@v2
    - name: Run the ones compiled for this OS
      shell: bash
      run: |
        set -x
        ls -al
        nimxc this
        set +x
        for dname in $(find . -type d -name "*_to_$(nimxc this)"); do
          echo ''
          echo '-------------------------------------------------------'
          echo "$dname"
          fname="${dname}/main"
          if [ -f "${fname}.exe" ]; then
            fname="${fname}.exe"
          fi
          chmod u+x "$fname"
          file "$fname"
          if [ "$(uname)" == "Darwin" ]; then
            otool -L "$fname" || true
          else
            ldd "$fname" || true
          fi
          "$fname" | tee "${dname}/output.txt"
          diff -u <(xxd "${dname}/expected.txt") <(xxd "${dname}/output.txt")
          echo ""
        done
# TODO: test other binaries using qemu
